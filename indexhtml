<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>スライドメーカー</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .loader{border:4px solid #f3f3f3;border-top:4px solid #4f46e5;border-radius:50%;width:40px;height:40px;animation:spin 1s linear infinite}
    @keyframes spin{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}
    .view-container{transition:opacity .3s ease-in-out,transform .3s ease-in-out}
    .view-container.hidden{opacity:0;transform:translateY(10px);pointer-events:none}
    #notification-banner{transition:transform .3s ease-in-out,opacity .3s ease-in-out}
    #notification-banner.hidden{transform:translateY(-100%);opacity:0}
    .sortable-item.dragging{opacity:.5}
    .sortable-item.drop-target{outline:2px dashed #cbd5e1}
    /* 閲覧モードの文字サイズ 2倍 */
    .viewer-text-scale{font-size:2em;line-height:1.35}
  </style>
</head>
<body class="bg-gray-100 font-sans text-gray-800">
  <!-- 通知バナー -->
  <div id="notification-banner" class="hidden fixed top-0 left-1/2 -translate-x-1/2 w-full max-w-md p-4 mt-4 z-50 rounded-lg shadow-lg" role="alert">
    <p id="notification-message"></p>
  </div>

  <!-- 確認モーダル -->
  <div id="confirm-modal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-60 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-sm">
      <p id="confirm-message" class="text-gray-800 mb-6">本当に実行しますか？</p>
      <div class="flex justify-end gap-4">
        <button id="confirm-cancel-btn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition">キャンセル</button>
        <button id="confirm-ok-btn" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition">OK</button>
      </div>
    </div>
  </div>

  <div class="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
    <div id="app">
      <header class="mb-6">
        <p class="text-gray-600">JSONデータからスライドを作成し、保存・閲覧できます。</p>
        <div id="auth-status" class="mt-2 text-xs text-gray-500">
          <p>ステータス: 初期化中...</p>
          <p>UserID: <span id="user-id-display">未認証</span></p>
        </div>
        <div class="mt-4 border-b border-gray-200">
          <nav class="flex -mb-px space-x-6" aria-label="Tabs">
            <button id="tab-editor" class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm border-indigo-500 text-indigo-600">作成 / 編集モード</button>
            <button id="tab-viewer" class="whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300">閲覧モード</button>
          </nav>
        </div>
      </header>

      <main>
        <!-- 作成/編集モード -->
        <div id="editor-view" class="view-container">
          <div class="grid grid-cols-1 lg:grid-cols-5 gap-8">
            <!-- 左：入力＆保存 -->
            <div class="bg-white p-6 rounded-xl shadow-md space-y-6 lg:col-span-2">
              <div>
                <h2 class="text-xl font-semibold mb-3">1. スライドデータの準備</h2>
                <p class="text-sm text-gray-600 mb-2">GPTsを使って文章からスライド用のJSONを生成できます。</p>
                <a href="https://chatgpt.com/g/g-68eb6abcec308191aa86a0bb98f47865-suraitojson" target="_blank" rel="noopener noreferrer" class="text-indigo-600 hover:text-indigo-800 underline font-medium">テキストJSON化GPTsを開く</a>
              </div>
              <div>
                <label for="json-input" class="block text-lg font-semibold mb-2">2. JSONデータを貼り付け</label>
                <textarea id="json-input" rows="8" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition" placeholder='[{"text_content":"スライド1の文章","image_url":"画像URL"}, ...]'></textarea>
                <button id="import-json-btn" class="mt-3 w-full bg-indigo-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-indigo-600 transition shadow">スライドをインポート</button>
              </div>
              <div class="border-t pt-6">
                <label for="slide-name" class="block text-lg font-semibold mb-2">3. スライド名の設定</label>
                <div class="flex flex-col sm:flex-row gap-3">
                  <input type="text" id="slide-name" class="flex-grow p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition" placeholder="例: 科学スライド_01" />
                  <button id="load-slides-btn" class="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg hover:bg-gray-300 transition">ロード</button>
                  <button id="save-slides-btn" class="bg-green-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-green-600 transition shadow">保存</button>
                </div>
                <div id="delete-slide-container" class="mt-4 text-center hidden">
                  <span id="delete-slide-link" class="text-xs text-red-500 hover:underline cursor-pointer">このスライドを完全に削除</span>
                </div>
              </div>
            </div>

            <!-- 右：プレビュー＆編集 -->
            <div class="bg-white p-6 rounded-xl shadow-md lg:col-span-3">
              <h2 class="text-xl font-semibold mb-4 text-center">スライドプレビュー & 編集</h2>

              <!-- できるだけ大きく表示するスライド枠 -->
              <div class="relative w-full">
                <div class="relative w-full bg-gray-100 rounded-lg border overflow-hidden">
                  <div id="editor-slide-container" class="w-full h-[62vh] sm:h-[68vh] flex items-center justify-center p-4">
                    <!-- スライドコンテンツが入る -->
                  </div>
                  <!-- 枠の左右“外側”に矢印（テキストのみ） -->
                  <span id="editor-prev-txt" class="select-none absolute left-0 top-1/2 -translate-y-1/2 -translate-x-full cursor-pointer text-gray-400 hover:text-gray-500 text-4xl px-2" aria-label="前へ">&lt;</span>
                  <span id="editor-next-txt" class="select-none absolute right-0 top-1/2 -translate-y-1/2 translate-x-full cursor-pointer text-gray-400 hover:text-gray-500 text-4xl px-2" aria-label="次へ">&gt;</span>
                </div>
              </div>

              <!-- 編集フォーム（並べ替えを画像URLの下） -->
              <div id="slide-edit-form" class="mt-6 border-t pt-6 space-y-4">
                <div>
                  <label for="text-content-input" class="block text-sm font-medium text-gray-700">文章の内容</label>
                  <textarea id="text-content-input" rows="3" class="mt-1 w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"></textarea>
                </div>
                <div>
                  <label for="image-url-input" class="block text-sm font-medium text-gray-700">画像アドレス (URL)</label>
                  <input type="text" id="image-url-input" class="mt-1 w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" placeholder="空欄でもOKです" />
                </div>
                <!-- 並べ替え（ドラッグ & ボタン） -->
                <div class="pt-2">
                  <h3 class="text-sm font-semibold text-gray-700 mb-2">スライドの順番を変更（ドラッグ & ドロップ／▲▼）</h3>
                  <ul id="reorder-list" class="divide-y divide-gray-200 rounded-lg border border-gray-200 overflow-hidden"></ul>
                  <p class="text-xs text-gray-500 mt-2">※ タッチ操作の端末では▲▼ボタンの方が確実です。</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- 閲覧モード -->
        <div id="viewer-view" class="view-container hidden">
          <div id="viewer-start-screen" class="max-w-md mx-auto bg-white p-8 rounded-xl shadow-md text-center">
            <h2 class="text-2xl font-bold mb-4">スライドを閲覧</h2>
            <p class="text-gray-600 mb-6">閲覧したいスライドの名前を入力してください。</p>
            <div class="flex gap-3">
              <input type="text" id="viewer-slide-name" class="flex-grow p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition" placeholder="例: 科学スライド_01" />
              <button id="start-viewer-btn" class="bg-indigo-500 text-white font-bold py-2 px-6 rounded-lg hover:bg-indigo-600 transition shadow">スライドをみる</button>
            </div>
          </div>

          <div id="viewer-slide-screen" class="hidden">
            <!-- できるだけ大きく表示するスライド枠 -->
            <div class="relative w-full">
              <div class="relative w-full bg-white rounded-xl shadow-lg p-0 border overflow-hidden">
                <div id="viewer-slide-container" class="w-full h-[70vh] flex flex-col items-center justify-center overflow-hidden">
                  <!-- スライドコンテンツを動的に挿入 -->
                </div>
                <!-- 枠の左右“外側”に矢印（テキストのみ／大きめ） -->
                <span id="viewer-prev-txt" class="select-none absolute left-0 top-1/2 -translate-y-1/2 -translate-x-full cursor-pointer text-gray-400 hover:text-gray-500 text-5xl px-2" aria-label="前へ">&lt;</span>
                <span id="viewer-next-txt" class="select-none absolute right-0 top-1/2 -translate-y-1/2 translate-x-full cursor-pointer text-gray-400 hover:text-gray-500 text-5xl px-2" aria-label="次へ">&gt;</span>
              </div>
            </div>
            <div class="text-center mt-6">
              <button id="viewer-back-btn" class="text-sm text-indigo-600 hover:text-indigo-800">別のスライドを閲覧する</button>
            </div>
          </div>
        </div>
      </main>
    </div>
  </div>

  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, collection, addDoc, getDocs, query, where, doc, updateDoc, deleteDoc, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    let app, db, auth; let SLIDES_COLLECTION_PATH;
    const state = { mode:'editor', userId:null, editor:{ slides:[], currentSlideIndex:-1, slideName:'', loadedDocId:null }, viewer:{ slides:[], currentSlideIndex:-1, slideName:'' } };

    const dom = {
      notificationBanner: document.getElementById('notification-banner'),
      notificationMessage: document.getElementById('notification-message'),
      confirmModal: document.getElementById('confirm-modal'),
      confirmMessage: document.getElementById('confirm-message'),
      confirmOkBtn: document.getElementById('confirm-ok-btn'),
      confirmCancelBtn: document.getElementById('confirm-cancel-btn'),
      authStatus: document.getElementById('auth-status'),
      userIdDisplay: document.getElementById('user-id-display'),
      tabEditor: document.getElementById('tab-editor'),
      tabViewer: document.getElementById('tab-viewer'),
      editorView: document.getElementById('editor-view'),
      viewerView: document.getElementById('viewer-view'),
      jsonInput: document.getElementById('json-input'),
      importJsonBtn: document.getElementById('import-json-btn'),
      slideNameInput: document.getElementById('slide-name'),
      loadSlidesBtn: document.getElementById('load-slides-btn'),
      saveSlidesBtn: document.getElementById('save-slides-btn'),
      deleteSlideContainer: document.getElementById('delete-slide-container'),
      deleteSlideLink: document.getElementById('delete-slide-link'),
      editorSlideContainer: document.getElementById('editor-slide-container'),
      editorPrevTxt: document.getElementById('editor-prev-txt'),
      editorNextTxt: document.getElementById('editor-next-txt'),
      addSlideBtn: document.getElementById('add-slide-btn'),
      deleteCurrentSlideBtn: document.getElementById('delete-current-slide-btn'),
      slideEditForm: document.getElementById('slide-edit-form'),
      textContentInput: document.getElementById('text-content-input'),
      imageUrlInput: document.getElementById('image-url-input'),
      viewerStartScreen: document.getElementById('viewer-start-screen'),
      viewerSlideNameInput: document.getElementById('viewer-slide-name'),
      startViewerBtn: document.getElementById('start-viewer-btn'),
      viewerSlideScreen: document.getElementById('viewer-slide-screen'),
      viewerSlideContainer: document.getElementById('viewer-slide-container'),
      viewerPrevTxt: document.getElementById('viewer-prev-txt'),
      viewerNextTxt: document.getElementById('viewer-next-txt'),
      viewerBackBtn: document.getElementById('viewer-back-btn'),
      reorderList: document.getElementById('reorder-list'),
    };

    function showNotification(message, type='info', duration=3000){
      dom.notificationMessage.textContent = message;
      dom.notificationBanner.className = 'fixed top-0 left-1/2 -translate-x-1/2 w-full max-w-md p-4 mt-4 z-50 rounded-lg shadow-lg';
      if(type==='success') dom.notificationBanner.classList.add('bg-green-100','text-green-800');
      else if(type==='error') dom.notificationBanner.classList.add('bg-red-100','text-red-800');
      else dom.notificationBanner.classList.add('bg-blue-100','text-blue-800');
      dom.notificationBanner.classList.remove('hidden');
      setTimeout(()=>dom.notificationBanner.classList.add('hidden'), duration);
    }

    function showConfirm(message){
      return new Promise((resolve)=>{
        dom.confirmMessage.textContent = message; dom.confirmModal.classList.remove('hidden');
        const onOk=()=>{dom.confirmModal.classList.add('hidden'); cleanup(); resolve(true)};
        const onCancel=()=>{dom.confirmModal.classList.add('hidden'); cleanup(); resolve(false)};
        const cleanup=()=>{dom.confirmOkBtn.removeEventListener('click', onOk); dom.confirmCancelBtn.removeEventListener('click', onCancel)};
        dom.confirmOkBtn.addEventListener('click', onOk, {once:true});
        dom.confirmCancelBtn.addEventListener('click', onCancel, {once:true});
      });
    }

    async function initializeFirebase(){
      try{
        let firebaseConfig; let appId; const fc = typeof __firebase_config !== 'undefined' ? __firebase_config : null; const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        if(fc){ firebaseConfig = JSON.parse(fc); appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; }
        else {
          console.warn('環境変数が提供されていません。コード内のデフォルトFirebase設定を使用します。');
          firebaseConfig = { apiKey:"AIzaSyBCRuejBykUMYlz0aug6YfMtTemccvRElc", authDomain:"slide-t2s.firebaseapp.com", projectId:"slide-t2s", storageBucket:"slide-t2s.appspot.com", messagingSenderId:"712571169987", appId:"1:712571169987:web:4d01a34961dd961d4e4676", measurementId:"G-7LTBNQ37HV" };
          appId = 'default-app-id-github';
        }
        SLIDES_COLLECTION_PATH = `/artifacts/${appId}/public/data/slides`;
        app = initializeApp(firebaseConfig); db = getFirestore(app); auth = getAuth(app); setLogLevel('debug');
        onAuthStateChanged(auth, user=>{ if(user){ state.userId=user.uid; dom.userIdDisplay.textContent=state.userId; dom.authStatus.innerHTML='<p class="text-green-600">ステータス: 認証済み</p>'; } else { state.userId=null; dom.userIdDisplay.textContent='未認証'; dom.authStatus.innerHTML='<p class="text-yellow-600">ステータス: 未認証</p>'; }});
        if(initialAuthToken) await signInWithCustomToken(auth, initialAuthToken); else await signInAnonymously(auth);
      }catch(error){ console.error('Firebase initialization error:', error); showNotification(`Firebase初期化エラー: ${error.message}`, 'error', 10000); dom.authStatus.innerHTML = `<p class="text-red-500">Firebase初期化エラー</p>`; document.querySelectorAll('button, input, textarea').forEach(el=>el.disabled=true); }
    }

    function render(){
      if(state.mode==='editor'){ dom.editorView.classList.remove('hidden'); dom.viewerView.classList.add('hidden'); dom.tabEditor.classList.add('border-indigo-500','text-indigo-600'); dom.tabEditor.classList.remove('border-transparent','text-gray-500'); dom.tabViewer.classList.add('border-transparent','text-gray-500'); dom.tabViewer.classList.remove('border-indigo-500','text-indigo-600'); renderEditor(); }
      else { dom.editorView.classList.add('hidden'); dom.viewerView.classList.remove('hidden'); dom.tabViewer.classList.add('border-indigo-500','text-indigo-600'); dom.tabViewer.classList.remove('border-transparent','text-gray-500'); dom.tabEditor.classList.add('border-transparent','text-gray-500'); dom.tabEditor.classList.remove('border-indigo-500','text-indigo-600'); renderViewer(); }
    }

    function renderEditor(){
      const {slides, currentSlideIndex, slideName, loadedDocId} = state.editor; dom.slideNameInput.value = slideName;
      if(slides.length===0 || currentSlideIndex===-1){ dom.editorSlideContainer.innerHTML = `<p class="text-gray-500">スライドがありません。JSONをインポートするか、新しいスライドを追加してください。</p>`; dom.slideEditForm.classList.add('hidden'); }
      else {
        const slide = slides[currentSlideIndex]; dom.editorSlideContainer.innerHTML = createSlideHTML(slide);
        dom.slideEditForm.classList.remove('hidden'); dom.textContentInput.value = slide.text_content || ''; dom.imageUrlInput.value = slide.image_url || '';
      }
      const leftDisabled = currentSlideIndex<=0; const rightDisabled = currentSlideIndex>=slides.length-1;
      dom.editorPrevTxt.classList.toggle('pointer-events-none', leftDisabled);
      dom.editorPrevTxt.classList.toggle('opacity-40', leftDisabled);
      dom.editorNextTxt.classList.toggle('pointer-events-none', rightDisabled);
      dom.editorNextTxt.classList.toggle('opacity-40', rightDisabled);
      dom.deleteSlideContainer.classList.toggle('hidden', !loadedDocId);
      renderReorderList();
    }

    function renderViewer(){
      const {slides, currentSlideIndex} = state.viewer;
      if(slides.length===0){ dom.viewerStartScreen.classList.remove('hidden'); dom.viewerSlideScreen.classList.add('hidden'); }
      else {
        dom.viewerStartScreen.classList.add('hidden'); dom.viewerSlideScreen.classList.remove('hidden'); const slide = slides[currentSlideIndex]; dom.viewerSlideContainer.innerHTML = createSlideHTML(slide, true);
        const leftDisabled = currentSlideIndex<=0; const rightDisabled = currentSlideIndex>=slides.length-1;
        dom.viewerPrevTxt.classList.toggle('pointer-events-none', leftDisabled);
        dom.viewerPrevTxt.classList.toggle('opacity-40', leftDisabled);
        dom.viewerNextTxt.classList.toggle('pointer-events-none', rightDisabled);
        dom.viewerNextTxt.classList.toggle('opacity-40', rightDisabled);
      }
    }

    function createSlideHTML(slide, isViewer=false){
      const hasImage = slide.image_url && slide.image_url.trim()!==''; const textHTML = (slide.text_content||'').replace(/\n/g,'<br>');
      if(isViewer){
        if(hasImage){
          return `<div class="w-full h-full flex flex-col justify-between bg-white rounded-xl overflow-hidden">
            <div class="w-full flex-grow flex items-center justify-center overflow-hidden p-4">
              <img src="${slide.image_url}" class="max-w-full max-h-full object-contain" onerror="this.parentElement.innerHTML='<div class=\\'w-full h-full flex items-center justify-center text-gray-500\\'>画像表示エラー</div>'">
            </div>
            <div class="w-full p-6 bg-white"><p class="viewer-text-scale text-center break-words text-gray-800">${textHTML}</p></div>
          </div>`;
        } else {
          return `<div class="w-full h-full flex items-center justify-center p-8 bg-white rounded-xl"><p class="viewer-text-scale text-center break-words text-gray-800">${textHTML}</p></div>`;
        }
      } else {
        if(hasImage){
          return `<div class="w-full h-full flex flex-col justify-between bg-gray-50 rounded-lg overflow-hidden">
            <div class="w-full flex-grow flex items-center justify-center overflow-hidden p-2">
              <img src="${slide.image_url}" class="max-w-full max-h-full object-contain" onerror="this.outerHTML='<div class=\\'text-red-500\\'>画像表示エラー</div>'">
            </div>
            <div class="w-full p-3 bg-white border-t"><p class="text-center text-sm text-gray-800 break-words">${textHTML}</p></div>
          </div>`;
        } else {
          return `<div class="w-full h-full flex items-center justify-center bg-gray-50 rounded-lg border p-4"><p class="text-center text-gray-800 break-words">${textHTML}</p></div>`;
        }
      }
    }

    function renderReorderList(){
      const {slides, currentSlideIndex} = state.editor; const ul = dom.reorderList; ul.innerHTML='';
      slides.forEach((s,i)=>{
        const li = document.createElement('li'); li.className = `sortable-item flex items-center justify-between gap-3 px-3 py-2 bg-white ${i===currentSlideIndex?'bg-indigo-50':''}`; li.setAttribute('draggable','true'); li.dataset.index=String(i);
        const label = document.createElement('div'); label.className='flex items-center gap-2 min-w-0'; label.innerHTML = `<span class="cursor-grab select-none text-gray-400">≡</span><span class="text-xs text-gray-500 shrink-0">${i+1}</span><span class="text-sm text-gray-800 truncate">${(s.text_content||'').replace(/\n/g,' ').slice(0,40) || '（無題）'}</span>`;
        const btns = document.createElement('div'); btns.className='shrink-0 flex items-center gap-1'; btns.innerHTML = `<button class="btn-up text-gray-500 hover:text-gray-700 px-2 py-1 text-xs border border-gray-200 rounded">▲</button><button class="btn-down text-gray-500 hover:text-gray-700 px-2 py-1 text-xs border border-gray-200 rounded">▼</button><button class="btn-jump text-gray-500 hover:text-gray-700 px-2 py-1 text-xs border border-gray-200 rounded">移動...</button>`;
        li.appendChild(label); li.appendChild(btns); ul.appendChild(li);
        btns.querySelector('.btn-up').addEventListener('click',()=>moveSlide(i, Math.max(0,i-1)));
        btns.querySelector('.btn-down').addEventListener('click',()=>moveSlide(i, Math.min(slides.length-1,i+1)));
        btns.querySelector('.btn-jump').addEventListener('click',()=>{ const toStr = prompt(`スライド ${i+1} を何番目に移動しますか？(1-${slides.length})`, String(i+1)); const to = Number(toStr)-1; if(!Number.isNaN(to) && to>=0 && to<slides.length) moveSlide(i,to); });
        li.addEventListener('dragstart',(e)=>{li.classList.add('dragging'); e.dataTransfer?.setData('text/plain', String(i));});
        li.addEventListener('dragend',()=>li.classList.remove('dragging'));
        li.addEventListener('dragover',(e)=>{e.preventDefault(); li.classList.add('drop-target');});
        li.addEventListener('dragleave',()=>li.classList.remove('drop-target'));
        li.addEventListener('drop',(e)=>{e.preventDefault(); li.classList.remove('drop-target'); const from = Number(e.dataTransfer?.getData('text/plain')); const to = Number(li.dataset.index); if(!Number.isNaN(from)&&!Number.isNaN(to)) moveSlide(from,to);});
        label.addEventListener('click',()=>{state.editor.currentSlideIndex=i; renderEditor();});
      });
    }

    function moveSlide(from,to){ const arr = state.editor.slides; if(from===to||from<0||to<0||from>=arr.length||to>=arr.length) return; const [moved] = arr.splice(from,1); arr.splice(to,0,moved); const cur = state.editor.currentSlideIndex; if(cur===from) state.editor.currentSlideIndex = to; else if(from<cur && to>=cur) state.editor.currentSlideIndex = cur-1; else if(from>cur && to<=cur) state.editor.currentSlideIndex = cur+1; renderEditor(); showNotification(`スライド${from+1} → ${to+1} に移動しました。`, 'success'); }

    function handleModeChange(newMode){ state.mode=newMode; render(); }

    function handleImportJson(){
      try{ let jsonText = dom.jsonInput.value.trim(); if(!jsonText){ showNotification('JSONデータが空です。','error'); return; }
        jsonText = jsonText.replace(/,(?=\s*[}\]])/g,'');
        const slidesData = JSON.parse(jsonText); if(!Array.isArray(slidesData)) throw new Error('データは配列形式である必要があります。');
        state.editor.slides = slidesData.map(s=>({ text_content:String(s.text_content||s.text||s.content||s.文章||s.テキスト||''), image_url:String(s.image_url||s.imageUrl||s.image||s.画像URL||s.画像||'') }));
        state.editor.currentSlideIndex = state.editor.slides.length>0?0:-1; state.editor.slideName=''; state.editor.loadedDocId=null; showNotification(`${state.editor.slides.length}件のスライドをインポートしました。`,'success'); renderEditor();
      }catch(e){ showNotification(`JSONの解析に失敗しました: ${e.message}`,'error'); }
    }

    function handleAddSlide(){ const newSlide={text_content:'新しいスライド', image_url:''}; state.editor.slides.push(newSlide); state.editor.currentSlideIndex = state.editor.slides.length-1; renderEditor(); }

    function handleDeleteCurrentSlide(){ const {slides,currentSlideIndex}=state.editor; if(slides.length===0||currentSlideIndex===-1){ showNotification('削除するスライドがありません。','info'); return; } slides.splice(currentSlideIndex,1); if(currentSlideIndex>=slides.length) state.editor.currentSlideIndex = slides.length-1; if(slides.length===0) state.editor.currentSlideIndex=-1; showNotification('現在のスライドを削除しました。','success'); renderEditor(); }

    function handleEditorNav(direction){ const {slides}=state.editor; const newIndex = state.editor.currentSlideIndex + direction; if(newIndex>=0 && newIndex<slides.length){ state.editor.currentSlideIndex=newIndex; renderEditor(); } }

    function handleSlideUpdate(){ const {slides,currentSlideIndex}=state.editor; if(currentSlideIndex!==-1){ slides[currentSlideIndex].text_content = dom.textContentInput.value; slides[currentSlideIndex].image_url = dom.imageUrlInput.value; dom.editorSlideContainer.innerHTML = createSlideHTML(slides[currentSlideIndex]); renderReorderList(); } }

    async function findSlidesByName(name){ if(!name||name.trim()==='') return null; const qy = query(collection(db, SLIDES_COLLECTION_PATH), where('slideName','==', name.trim())); const qs = await getDocs(qy); if(!qs.empty) return qs.docs[0]; return null; }

    async function handleSaveSlides(){ const slideName = dom.slideNameInput.value.trim(); if(!slideName){ showNotification('スライド名を入力してください。','error'); return; } if(state.editor.slides.length===0){ showNotification('保存するスライドがありません。','error'); return; } if(!auth.currentUser){ showNotification('認証が完了していません。','error'); return; }
      const dataToSave = { slideName, slides: state.editor.slides, authorId: state.userId, updatedAt: new Date().toISOString() };
      try{ dom.saveSlidesBtn.disabled=true; dom.saveSlidesBtn.textContent='保存中...'; const existingDoc = await findSlidesByName(slideName);
        if(existingDoc && existingDoc.id!==state.editor.loadedDocId){ const confirmed = await showConfirm(`同じ名前のスライド「${slideName}」が既に存在します。上書きしますか？`); if(!confirmed){ dom.saveSlidesBtn.disabled=false; dom.saveSlidesBtn.textContent='保存'; return; } const ref = doc(db, SLIDES_COLLECTION_PATH, existingDoc.id); await updateDoc(ref, dataToSave); state.editor.loadedDocId = existingDoc.id; showNotification('スライドを上書き保存しました。','success'); }
        else if(state.editor.loadedDocId){ const ref = doc(db, SLIDES_COLLECTION_PATH, state.editor.loadedDocId); await updateDoc(ref, dataToSave); showNotification('スライドを更新しました。','success'); }
        else { dataToSave.createdAt = new Date().toISOString(); const ref = await addDoc(collection(db, SLIDES_COLLECTION_PATH), dataToSave); state.editor.loadedDocId = ref.id; showNotification('新しいスライドを保存しました。','success'); }
        state.editor.slideName = slideName;
      }catch(error){ console.error('Error saving slides: ', error); showNotification('スライドの保存に失敗しました。','error'); }
      finally{ dom.saveSlidesBtn.disabled=false; dom.saveSlidesBtn.textContent='保存'; renderEditor(); }
    }

    async function handleLoadSlides(){ const slideName = dom.slideNameInput.value.trim(); if(!slideName){ showNotification('ロードするスライド名を入力してください。','error'); return; }
      try{ dom.loadSlidesBtn.disabled=true; dom.loadSlidesBtn.textContent='ロード中...'; const slideDoc = await findSlidesByName(slideName); if(slideDoc){ const data = slideDoc.data(); state.editor.slides = data.slides||[]; state.editor.currentSlideIndex = data.slides.length>0?0:-1; state.editor.slideName = data.slideName; state.editor.loadedDocId = slideDoc.id; dom.jsonInput.value=''; showNotification(`スライド「${data.slideName}」をロードしました。`,'success'); } else { showNotification(`スライド「${slideName}」が見つかりませんでした。`,'error'); } }
      catch(error){ console.error('Error loading slides: ', error); showNotification('スライドのロードに失敗しました。','error'); }
      finally{ dom.loadSlidesBtn.disabled=false; dom.loadSlidesBtn.textContent='ロード'; renderEditor(); }
    }

    async function handleDeleteSlides(){ const {loadedDocId, slideName} = state.editor; if(!loadedDocId) return; const confirmed = await showConfirm(`本当にスライド「${slideName}」を削除しますか？この操作は元に戻せません。`); if(confirmed){ try{ await deleteDoc(doc(db, SLIDES_COLLECTION_PATH, loadedDocId)); showNotification('スライドを削除しました。','success'); state.editor.slides=[]; state.editor.currentSlideIndex=-1; state.editor.slideName=''; state.editor.loadedDocId=null; dom.slideNameInput.value=''; renderEditor(); } catch(error){ console.error('Error deleting slides: ', error); showNotification('スライドの削除に失敗しました。','error'); } } }

    async function handleStartViewer(){ const slideName = dom.viewerSlideNameInput.value.trim(); if(!slideName){ showNotification('スライド名を入力してください。','error'); return; } try{ dom.startViewerBtn.disabled=true; dom.startViewerBtn.textContent='検索中...'; const slideDoc = await findSlidesByName(slideName); if(slideDoc){ const data = slideDoc.data(); state.viewer.slides = data.slides||[]; state.viewer.currentSlideIndex = data.slides.length>0?0:-1; state.viewer.slideName = data.slideName; } else { showNotification(`スライド「${slideName}」が見つかりませんでした。`,'error'); state.viewer.slides = []; } } catch(e){ showNotification('スライドの読み込みに失敗しました。','error'); } finally{ dom.startViewerBtn.disabled=false; dom.startViewerBtn.textContent='スライドをみる'; renderViewer(); } }

    function handleViewerNav(direction){ const {slides}=state.viewer; const newIndex = state.viewer.currentSlideIndex + direction; if(newIndex>=0 && newIndex<slides.length){ state.viewer.currentSlideIndex=newIndex; renderViewer(); } }

    function handleViewerBack(){ state.viewer.slides=[]; state.viewer.currentSlideIndex=-1; state.viewer.slideName=''; dom.viewerSlideNameInput.value=''; renderViewer(); }

    function setupEventListeners(){
      dom.tabEditor.addEventListener('click', ()=>handleModeChange('editor'));
      dom.tabViewer.addEventListener('click', ()=>handleModeChange('viewer'));
      dom.importJsonBtn.addEventListener('click', handleImportJson);
      dom.addSlideBtn?.addEventListener('click', handleAddSlide);
      dom.deleteCurrentSlideBtn?.addEventListener('click', handleDeleteCurrentSlide);
      dom.editorPrevTxt.addEventListener('click', ()=>handleEditorNav(-1));
      dom.editorNextTxt.addEventListener('click', ()=>handleEditorNav(1));
      dom.textContentInput.addEventListener('input', handleSlideUpdate);
      dom.imageUrlInput.addEventListener('input', handleSlideUpdate);
      dom.saveSlidesBtn.addEventListener('click', handleSaveSlides);
      dom.loadSlidesBtn.addEventListener('click', handleLoadSlides);
      dom.deleteSlideLink.addEventListener('click', handleDeleteSlides);
      dom.startViewerBtn.addEventListener('click', handleStartViewer);
      dom.viewerPrevTxt.addEventListener('click', ()=>handleViewerNav(-1));
      dom.viewerNextTxt.addEventListener('click', ()=>handleViewerNav(1));
      dom.viewerBackBtn.addEventListener('click', handleViewerBack);
    }

    async function main(){ setupEventListeners(); await initializeFirebase(); render(); }
    main();
  </script>
</body>
</html>
